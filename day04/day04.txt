十、...
3...
4)拷贝构造的时机
A.直接构造对象副本
B.以对象的形式传参
C.以对象的形式返回(有时会被编译器优化掉)
4.自定义和系统定义的构造函数
自定义构造函数           系统定义构造函数
无                               缺省构造函数和缺省拷贝构造函数
除拷贝构造函数以        缺省拷贝构造函数
外的任何构造函数                      
拷贝构造函数              无
5.初始化表
class 类名 {
    类名 (形参表) : 初始化表 {
        构造函数体;
    }
};
1)多数情况下通过初始化表初始化成员变量和在构造函数体内初始化成员变量没有太大的差别，可以任选一种初始化方式。
2)某些情况下必须通过初始化表进行初始化：
A.基类或者成员子对象的类型没有缺省构造函数；
B.包含引用或者常量形式的成员变量。
const int i = 10;
int x;
int& r = x;
3)类成员变量按照其被声明的顺序依次获得初始化，而与其在初始化表中的前后位置无关。
十一、this指针与常函数
1.this指针
1)每个类的构造函数和成员函数中都包含一个隐藏的该类类型的指针参数，名为this，该指针指向调用这个成员函数或正在被构造的对象。成员函数和构造函数中对该类其它成员的访问，都是通过this指针进行的。this指针可以在成员函数或构造函数内部直接显式地引用。
2)显式使用this的场合
A.区分作用域
B.从类的内部向外部传递该类对象地址
C.从类的内部向外返回该类对象自身――返回自引用
D.从类的内部销毁该类对象自身――对象自毁
2.常函数
1)形如
返回类型 函数名 (形参表) const { 函数体 }
的成员函数，其中的this指针是一个常指针，因此不能该函数中修改成员变量的值，这样的成员函数叫做常函数。
2)被mutable关键字修饰的成员变量可以在常函数中被修改。
3)非常对象既可以调用非常函数，也可以调用常函数，但是常对象只能调用常函数，不能调用非常函数。
4)函数名和形参表相同的成员函数，其常版本和非常版本可以构成重载关系，常对象调用常版本，非常对象调用非常版本。如果没有非常版本，那么非常对象也能调用常版本。
5)一般情况下，如果一个成员函数不修改任何成员变量，那么最好将其声明为常函数。假如根据需求不得不对个别成员变量进行修改，则可以通过对this指针去常，或者为需要修改的成员变量加mutable关键字的方法进行处理。
十二、析构函数
1.析构函数是类的特殊的成员函数
1)函数名必须是“~类名”；
2)既没有返回类型，也没有参数；
3)不能被重载，即一个类只能有一个析构函数。
2.析构函数主要负责清理对象生命期内动态产生的资源。
3.析构函数在对象被销毁时自动被调用：
1)栈对象当其离开作用域时，其析构函数被作用域终止花括号调用；
2)堆对象的析构函数被delete/delete[]运算符调用。
4.如果一个类没有显式定义析构函数，那么系统会为该类提供一个缺省析构函数：
1)对基本类型的成员变量，什么也不做；
2)对类类型的成员变量，调用相应类型的析构函数。
5.对象的销毁过程
1)调用析构函数
A.执行析构函数代码
B.调用成员子对象的析构函数
C.调用基类子对象的析构函数
2)释放对象所占用的内存空间
十三、拷贝构造与拷贝赋值
1.如果一个类包含指针形式的成员变量，系统提供的缺省拷贝构造函数，只是复制了指针成员变量本身，而没有复制该变量所指向的内容，这种拷贝方式被称为浅拷贝。浅拷贝将导致不同对象间的数据共享，同时会在析构函数中引发"double free"异常。为此就必须自己定义一个支持复制内容即深拷贝的拷贝构造函数。
2.类的缺省拷贝赋值同样对于基本类型成员变量按字节复制，因此和缺省拷贝构造函数一样，是浅拷贝。为了得到深拷贝的赋值效果，就需要自己定义一个支持深拷贝的拷贝赋值运算符函数。
1)防止自赋值
2)分配新资源
3)释放旧资源
4)复制新内容
5)返回自引用
6)复用拷贝构造和析构
3.忠告和建议
1)尽量避免是指针形式的成员变量；
2)尽量避免拷贝构造和拷贝赋值；
3)如果拷贝构造支持深拷贝，那么拷贝赋值就也应该支持深拷贝，反之亦然。
4)处于具体原因，确实无法实现深拷贝sss的拷贝构造和拷贝赋值，可以将拷贝构造函数和拷贝赋值运算符函数声明为私有函数，禁止用户使用。
十四、静态成员
1.静态成员变量
1)静态成员变量在类中声明时需要使用static关键字进行修饰；
2)静态成员变量不能在构造函数中被定义及初始化，而必须在类的外部单独进行定义和初始化；
3)静态成员变量每个类只有一份拷贝，并为该类的所有对象所共享；
4)可以通过对象访问其类型中的静态成员变量，也可以通过类直接访问；
5)静态成员变量和全局变量一样，存放在进程空间的静态存储区中；
6)静态成员变量的作用基本上和全局变量一样，只是受类的作用域及其访问控制限定符的约束。